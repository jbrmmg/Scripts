import jenkins.model.*

/*
 * Use SCM in jenkins to use this:
 *
 * URL:     https://github.com/jbrmmg/Scripts
 * Branch:  Release
 * Path:    ./src/main/resources/jenkins/Jenkinsfile
 *
 */

pipeline {
    agent {
        label env.ENVIRONMENT + "-" + env.COMPONENT_NAME
    }

    stages {
        stage('cleanup') {
            steps {
                // Delete the zip
                sh script: "rm -f artifact.zip"

                // Delete the folder
                sh script: "rm -fR artifactExtract"

                // Delete the previous response.
                sh script: "rm -f response.xml"
            }
        }

        stage('download') {
            when {
                expression { return env.NODE_LABELS.contains(env.ENVIRONMENT + "-" + env.COMPONENT_NAME) && env.ACTION.equals("CREATED") }
            }

            steps {
                echo "NODE_NAME      = ${env.NODE_NAME}"
                echo "ENVIRONMENT    = ${env.ENVIRONMENT}"
                echo "COMPONENT_NAME = ${env.COMPONENT_NAME}"

                echo "Wait 10s"
                sleep 10

                echo "Find artifact"
                sh script: "curl -u download:password \"http://nexus.jbrmmg.me.uk:8081/service/rest/v1/search/assets?sort=version&direction=desc&repository=${env.REPOSITORY_NAME}&group=${env.COMPONENT_GROUP}&name=${env.COMPONENT_NAME}&version=${env.COMPONENT_VERSION}&maven.extension=zip\" --output ./response.xml"

                echo "Response Content"
                sh script: "cat response.xml"

                echo "Artifact download URL"
                sh script: "cat response.xml | grep -Po '\"downloadUrl\" : \"\\K.+(?=\",)'"

                echo "Download"
                sh script: "cat response.xml | grep -Po '\"downloadUrl\" : \"\\K.+(?=\",)' | xargs curl -f -o artifact.zip"
            }
        }

        stage('extract') {
            when {
                expression { return fileExists ('./artifact.zip') }
            }

            steps {
                // Unzip the files
                sh 'unzip ./artifact.zip -d ./artifactExtract'

                // Clean up.
                sh script: "rm -f artifact.zip"
            }
        }

        stage('deploy') {
            when {
                expression { return fileExists ('./artifactExtract/pre_deploy.sh') && fileExists ('./artifactExtract/post_deploy.sh') }
            }

            environment {
                DEPLOYMENT_DIR = "${env.REPOSITORY_NAME == "maven-releases" ? "/usr/bin/jbr" : "/usr/bin/jbr/dev"}"
            }

            steps {
                // Run the pre-deployment script (if exists)
                sh script: "./artifactExtract/pre_deploy.sh ${env.REPOSITORY_NAME} ${env.COMPONENT_NAME} ${env.DEPLOYMENT_DIR}"

                // Copy the files
                // This requires that the deployment directory exists and is writable by jenkins user
                sh script: "cp -R ./artifactExtract/deploy/. ${env.DEPLOYMENT_DIR}"

                // Run the post-deployment script (if exists)
                sh script: "./artifactExtract/post_deploy.sh ${env.REPOSITORY_NAME} ${env.COMPONENT_NAME} ${env.DEPLOYMENT_DIR}"
            }
        }
    }
}
